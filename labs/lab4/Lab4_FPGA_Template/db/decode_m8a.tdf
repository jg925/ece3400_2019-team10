--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=9 LPM_WIDTH=4 data eq
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_compare 2017:04:25:18:06:29:SJ cbx_lpm_decode 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_m8a
( 
	data[3..0]	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode622w[3..0]	: WIRE;
	w_anode639w[3..0]	: WIRE;
	w_anode649w[3..0]	: WIRE;
	w_anode659w[3..0]	: WIRE;
	w_anode669w[3..0]	: WIRE;
	w_anode679w[3..0]	: WIRE;
	w_anode689w[3..0]	: WIRE;
	w_anode699w[3..0]	: WIRE;
	w_anode709w[3..0]	: WIRE;
	w_anode720w[3..0]	: WIRE;
	w_anode730w[3..0]	: WIRE;
	w_anode740w[3..0]	: WIRE;
	w_anode750w[3..0]	: WIRE;
	w_anode760w[3..0]	: WIRE;
	w_anode770w[3..0]	: WIRE;
	w_anode780w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[0..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode699w[3..3], w_anode689w[3..3], w_anode679w[3..3], w_anode669w[3..3], w_anode659w[3..3], w_anode649w[3..3], w_anode639w[3..3], w_anode622w[3..3]);
	eq_wire2w[] = ( w_anode780w[3..3], w_anode770w[3..3], w_anode760w[3..3], w_anode750w[3..3], w_anode740w[3..3], w_anode730w[3..3], w_anode720w[3..3], w_anode709w[3..3]);
	w_anode622w[] = ( (w_anode622w[2..2] & (! data_wire[2..2])), (w_anode622w[1..1] & (! data_wire[1..1])), (w_anode622w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode639w[] = ( (w_anode639w[2..2] & (! data_wire[2..2])), (w_anode639w[1..1] & (! data_wire[1..1])), (w_anode639w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode649w[] = ( (w_anode649w[2..2] & (! data_wire[2..2])), (w_anode649w[1..1] & data_wire[1..1]), (w_anode649w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode659w[] = ( (w_anode659w[2..2] & (! data_wire[2..2])), (w_anode659w[1..1] & data_wire[1..1]), (w_anode659w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode669w[] = ( (w_anode669w[2..2] & data_wire[2..2]), (w_anode669w[1..1] & (! data_wire[1..1])), (w_anode669w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode679w[] = ( (w_anode679w[2..2] & data_wire[2..2]), (w_anode679w[1..1] & (! data_wire[1..1])), (w_anode679w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode689w[] = ( (w_anode689w[2..2] & data_wire[2..2]), (w_anode689w[1..1] & data_wire[1..1]), (w_anode689w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode699w[] = ( (w_anode699w[2..2] & data_wire[2..2]), (w_anode699w[1..1] & data_wire[1..1]), (w_anode699w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode709w[] = ( (w_anode709w[2..2] & (! data_wire[2..2])), (w_anode709w[1..1] & (! data_wire[1..1])), (w_anode709w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode720w[] = ( (w_anode720w[2..2] & (! data_wire[2..2])), (w_anode720w[1..1] & (! data_wire[1..1])), (w_anode720w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode730w[] = ( (w_anode730w[2..2] & (! data_wire[2..2])), (w_anode730w[1..1] & data_wire[1..1]), (w_anode730w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode740w[] = ( (w_anode740w[2..2] & (! data_wire[2..2])), (w_anode740w[1..1] & data_wire[1..1]), (w_anode740w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode750w[] = ( (w_anode750w[2..2] & data_wire[2..2]), (w_anode750w[1..1] & (! data_wire[1..1])), (w_anode750w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode760w[] = ( (w_anode760w[2..2] & data_wire[2..2]), (w_anode760w[1..1] & (! data_wire[1..1])), (w_anode760w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode770w[] = ( (w_anode770w[2..2] & data_wire[2..2]), (w_anode770w[1..1] & data_wire[1..1]), (w_anode770w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode780w[] = ( (w_anode780w[2..2] & data_wire[2..2]), (w_anode780w[1..1] & data_wire[1..1]), (w_anode780w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
